
stm32f303xCxx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000960  08000968  00010968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000960  08000960  00010968  2**0
                  CONTENTS
  4 .ARM          00000000  08000960  08000960  00010968  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000960  08000968  00010968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000960  08000960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000964  08000964  00010964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010968  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010992  2**0
                  CONTENTS, READONLY
 14 .debug_info   000009ad  00000000  00000000  000109d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002b6  00000000  00000000  00011382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00011638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008c  00000000  00000000  00011700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000021a7  00000000  00000000  0001178c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000010b0  00000000  00000000  00013933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000085e0  00000000  00000000  000149e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000288  00000000  00000000  0001cfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0001d24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000948 	.word	0x08000948

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000948 	.word	0x08000948

080001d4 <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i <= 300000/2; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	000249f0 	.word	0x000249f0

08000200 <main>:

int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, UsrBtn;
	memset(&GpioLed,0,sizeof(GpioLed)); //This ensure all member elements are initialized to zero
 8000206:	f107 030c 	add.w	r3, r7, #12
 800020a:	220c      	movs	r2, #12
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fb6e 	bl	80008f0 <memset>
	memset(&UsrBtn,0,sizeof(UsrBtn));
 8000214:	463b      	mov	r3, r7
 8000216:	220c      	movs	r2, #12
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fb68 	bl	80008f0 <memset>
	//Configure LED pin
	GpioLed.pGPIOx = GPIOE;
 8000220:	4b15      	ldr	r3, [pc, #84]	; (8000278 <main+0x78>)
 8000222:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000224:	230e      	movs	r3, #14
 8000226:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000228:	2301      	movs	r3, #1
 800022a:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinOutType = GPIO_OP_TYPE_PP;
 800022c:	2300      	movs	r3, #0
 800022e:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPd = GPIO_NO_PUPD;
 8000230:	2300      	movs	r3, #0
 8000232:	753b      	strb	r3, [r7, #20]
	//Enable LED pin
	GPIO_PClkCtrl(GPIOE, ENABLE);
 8000234:	2101      	movs	r1, #1
 8000236:	4810      	ldr	r0, [pc, #64]	; (8000278 <main+0x78>)
 8000238:	f000 f85c 	bl	80002f4 <GPIO_PClkCtrl>
	GPIO_Init(&GpioLed);
 800023c:	f107 030c 	add.w	r3, r7, #12
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f8f5 	bl	8000430 <GPIO_Init>
	//Configure Button Pin
	UsrBtn.pGPIOx = GPIOC;
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <main+0x7c>)
 8000248:	603b      	str	r3, [r7, #0]
	UsrBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800024a:	2302      	movs	r3, #2
 800024c:	713b      	strb	r3, [r7, #4]
	UsrBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INTRUPT_FALL;
 800024e:	2304      	movs	r3, #4
 8000250:	717b      	strb	r3, [r7, #5]
	UsrBtn.GPIO_PinConfig.GPIO_PinPuPd = GPIO_NO_PUPD;
 8000252:	2300      	movs	r3, #0
 8000254:	723b      	strb	r3, [r7, #8]
	//Enable Button Pin
	GPIO_PClkCtrl(GPIOC, ENABLE);
 8000256:	2101      	movs	r1, #1
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <main+0x7c>)
 800025a:	f000 f84b 	bl	80002f4 <GPIO_PClkCtrl>
	GPIO_Init(&UsrBtn);
 800025e:	463b      	mov	r3, r7
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f8e5 	bl	8000430 <GPIO_Init>
	//Interrupt handling
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI2, 1);
 8000266:	2101      	movs	r1, #1
 8000268:	2008      	movs	r0, #8
 800026a:	f000 faf7 	bl	800085c <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(IRQ_NO_EXTI2, ENABLE);
 800026e:	2101      	movs	r1, #1
 8000270:	2008      	movs	r0, #8
 8000272:	f000 fa6f 	bl	8000754 <GPIO_IRQConfig>
    /* Loop forever */
	while(1);
 8000276:	e7fe      	b.n	8000276 <main+0x76>
 8000278:	48001000 	.word	0x48001000
 800027c:	48000800 	.word	0x48000800

08000280 <EXTI2_TSC_IRQHandler>:
}

void EXTI2_TSC_IRQHandler(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	delay();
 8000284:	f7ff ffa6 	bl	80001d4 <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_2);
 8000288:	2002      	movs	r0, #2
 800028a:	f000 fb11 	bl	80008b0 <GPIO_IRQHandling>
	GPIO_ToggleOpPin(GPIOE, GPIO_PIN_NO_14);
 800028e:	210e      	movs	r1, #14
 8000290:	4802      	ldr	r0, [pc, #8]	; (800029c <EXTI2_TSC_IRQHandler+0x1c>)
 8000292:	f000 fa4b 	bl	800072c <GPIO_ToggleOpPin>
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	48001000 	.word	0x48001000

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 fb17 	bl	8000900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff95 	bl	8000200 <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	08000968 	.word	0x08000968
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_2_IRQHandler>
	...

080002f4 <GPIO_PClkCtrl>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t E_D)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
	if(E_D == ENABLE)
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d141      	bne.n	800038a <GPIO_PClkCtrl+0x96>
	{
		if(pGPIOx == GPIOA)			{	GPIOA_CLK_EN();	}
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800030c:	d106      	bne.n	800031c <GPIO_PClkCtrl+0x28>
 800030e:	4b42      	ldr	r3, [pc, #264]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a41      	ldr	r2, [pc, #260]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000318:	6153      	str	r3, [r2, #20]
		else if(pGPIOx == GPIOC) 	{	GPIOC_CLK_DI();	}
		else if(pGPIOx == GPIOD) 	{	GPIOD_CLK_DI();	}
		else if(pGPIOx == GPIOE) 	{	GPIOE_CLK_DI();	}
		else if(pGPIOx == GPIOF) 	{	GPIOF_CLK_DI();	}
	}
}
 800031a:	e077      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOB) 	{	GPIOB_CLK_EN();	}
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a3f      	ldr	r2, [pc, #252]	; (800041c <GPIO_PClkCtrl+0x128>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PClkCtrl+0x3e>
 8000324:	4b3c      	ldr	r3, [pc, #240]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a3b      	ldr	r2, [pc, #236]	; (8000418 <GPIO_PClkCtrl+0x124>)
 800032a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800032e:	6153      	str	r3, [r2, #20]
}
 8000330:	e06c      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOC) 	{	GPIOC_CLK_EN();	}
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a3a      	ldr	r2, [pc, #232]	; (8000420 <GPIO_PClkCtrl+0x12c>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PClkCtrl+0x54>
 800033a:	4b37      	ldr	r3, [pc, #220]	; (8000418 <GPIO_PClkCtrl+0x124>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a36      	ldr	r2, [pc, #216]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000344:	6153      	str	r3, [r2, #20]
}
 8000346:	e061      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOD) 	{	GPIOD_CLK_EN();	}
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a36      	ldr	r2, [pc, #216]	; (8000424 <GPIO_PClkCtrl+0x130>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PClkCtrl+0x6a>
 8000350:	4b31      	ldr	r3, [pc, #196]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a30      	ldr	r2, [pc, #192]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800035a:	6153      	str	r3, [r2, #20]
}
 800035c:	e056      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOE) 	{	GPIOE_CLK_EN();	}
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a31      	ldr	r2, [pc, #196]	; (8000428 <GPIO_PClkCtrl+0x134>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PClkCtrl+0x80>
 8000366:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a2b      	ldr	r2, [pc, #172]	; (8000418 <GPIO_PClkCtrl+0x124>)
 800036c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000370:	6153      	str	r3, [r2, #20]
}
 8000372:	e04b      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOF) 	{	GPIOF_CLK_EN();	}
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a2d      	ldr	r2, [pc, #180]	; (800042c <GPIO_PClkCtrl+0x138>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d147      	bne.n	800040c <GPIO_PClkCtrl+0x118>
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <GPIO_PClkCtrl+0x124>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a25      	ldr	r2, [pc, #148]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000382:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000386:	6153      	str	r3, [r2, #20]
}
 8000388:	e040      	b.n	800040c <GPIO_PClkCtrl+0x118>
		if(pGPIOx == GPIOA)			{	GPIOA_CLK_DI();	}
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000390:	d106      	bne.n	80003a0 <GPIO_PClkCtrl+0xac>
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a20      	ldr	r2, [pc, #128]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000398:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800039c:	6153      	str	r3, [r2, #20]
}
 800039e:	e035      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOB) 	{	GPIOB_CLK_DI();	}
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a1e      	ldr	r2, [pc, #120]	; (800041c <GPIO_PClkCtrl+0x128>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PClkCtrl+0xc2>
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a1a      	ldr	r2, [pc, #104]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003b2:	6153      	str	r3, [r2, #20]
}
 80003b4:	e02a      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOC) 	{	GPIOC_CLK_DI();	}
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a19      	ldr	r2, [pc, #100]	; (8000420 <GPIO_PClkCtrl+0x12c>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PClkCtrl+0xd8>
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003c4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80003c8:	6153      	str	r3, [r2, #20]
}
 80003ca:	e01f      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOD) 	{	GPIOD_CLK_DI();	}
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a15      	ldr	r2, [pc, #84]	; (8000424 <GPIO_PClkCtrl+0x130>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PClkCtrl+0xee>
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a0f      	ldr	r2, [pc, #60]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80003de:	6153      	str	r3, [r2, #20]
}
 80003e0:	e014      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOE) 	{	GPIOE_CLK_DI();	}
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a10      	ldr	r2, [pc, #64]	; (8000428 <GPIO_PClkCtrl+0x134>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PClkCtrl+0x104>
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <GPIO_PClkCtrl+0x124>)
 80003f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80003f4:	6153      	str	r3, [r2, #20]
}
 80003f6:	e009      	b.n	800040c <GPIO_PClkCtrl+0x118>
		else if(pGPIOx == GPIOF) 	{	GPIOF_CLK_DI();	}
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a0c      	ldr	r2, [pc, #48]	; (800042c <GPIO_PClkCtrl+0x138>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d105      	bne.n	800040c <GPIO_PClkCtrl+0x118>
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <GPIO_PClkCtrl+0x124>)
 8000406:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800040a:	6153      	str	r3, [r2, #20]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	48000400 	.word	0x48000400
 8000420:	48000800 	.word	0x48000800
 8000424:	48000c00 	.word	0x48000c00
 8000428:	48001000 	.word	0x48001000
 800042c:	48001400 	.word	0x48001400

08000430 <GPIO_Init>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000430:	b480      	push	{r7}
 8000432:	b087      	sub	sp, #28
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
	//1. Configure mode of port
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	2b03      	cmp	r3, #3
 8000442:	d821      	bhi.n	8000488 <GPIO_Init+0x58>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	795b      	ldrb	r3, [r3, #5]
 8000448:	461a      	mov	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	791b      	ldrb	r3, [r3, #4]
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	fa02 f303 	lsl.w	r3, r2, r3
 8000454:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->GPIOx_MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clear
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	4619      	mov	r1, r3
 8000462:	2303      	movs	r3, #3
 8000464:	408b      	lsls	r3, r1
 8000466:	43db      	mvns	r3, r3
 8000468:	4619      	mov	r1, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	400a      	ands	r2, r1
 8000470:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->GPIOx_MODER |= temp;//To set always use bitwise OR rather than equating a variable
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	6819      	ldr	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	430a      	orrs	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]
 8000486:	e0a1      	b.n	80005cc <GPIO_Init+0x19c>
	}
	else
	{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INTRUPT_FALL)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	795b      	ldrb	r3, [r3, #5]
 800048c:	2b04      	cmp	r3, #4
 800048e:	d117      	bne.n	80004c0 <GPIO_Init+0x90>
		{
			// Configure FTSR (Falling Trigger Selection Register)
			EXTI->EXTI_FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000490:	4b9e      	ldr	r3, [pc, #632]	; (800070c <GPIO_Init+0x2dc>)
 8000492:	68db      	ldr	r3, [r3, #12]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	43d2      	mvns	r2, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a9a      	ldr	r2, [pc, #616]	; (800070c <GPIO_Init+0x2dc>)
 80004a4:	400b      	ands	r3, r1
 80004a6:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b98      	ldr	r3, [pc, #608]	; (800070c <GPIO_Init+0x2dc>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a94      	ldr	r2, [pc, #592]	; (800070c <GPIO_Init+0x2dc>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
 80004be:	e035      	b.n	800052c <GPIO_Init+0xfc>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INTRUPT_RISE)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	795b      	ldrb	r3, [r3, #5]
 80004c4:	2b05      	cmp	r3, #5
 80004c6:	d117      	bne.n	80004f8 <GPIO_Init+0xc8>
		{
			// Configure RTSR (Rising Trigger Selection Register)
			EXTI->EXTI_RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c8:	4b90      	ldr	r3, [pc, #576]	; (800070c <GPIO_Init+0x2dc>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7912      	ldrb	r2, [r2, #4]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a8c      	ldr	r2, [pc, #560]	; (800070c <GPIO_Init+0x2dc>)
 80004dc:	400b      	ands	r3, r1
 80004de:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e0:	4b8a      	ldr	r3, [pc, #552]	; (800070c <GPIO_Init+0x2dc>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7912      	ldrb	r2, [r2, #4]
 80004e8:	4611      	mov	r1, r2
 80004ea:	2201      	movs	r2, #1
 80004ec:	408a      	lsls	r2, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a86      	ldr	r2, [pc, #536]	; (800070c <GPIO_Init+0x2dc>)
 80004f2:	430b      	orrs	r3, r1
 80004f4:	6093      	str	r3, [r2, #8]
 80004f6:	e019      	b.n	800052c <GPIO_Init+0xfc>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_INTRUPT_RISE_FALL)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	2b06      	cmp	r3, #6
 80004fe:	d115      	bne.n	800052c <GPIO_Init+0xfc>
		{
			//configure both FTSR and RTSR
			EXTI->EXTI_RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000500:	4b82      	ldr	r3, [pc, #520]	; (800070c <GPIO_Init+0x2dc>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	4611      	mov	r1, r2
 8000510:	4a7e      	ldr	r2, [pc, #504]	; (800070c <GPIO_Init+0x2dc>)
 8000512:	430b      	orrs	r3, r1
 8000514:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000516:	4b7d      	ldr	r3, [pc, #500]	; (800070c <GPIO_Init+0x2dc>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	7912      	ldrb	r2, [r2, #4]
 800051e:	4611      	mov	r1, r2
 8000520:	2201      	movs	r2, #1
 8000522:	408a      	lsls	r2, r1
 8000524:	4611      	mov	r1, r2
 8000526:	4a79      	ldr	r2, [pc, #484]	; (800070c <GPIO_Init+0x2dc>)
 8000528:	430b      	orrs	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
		}
		// Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	089b      	lsrs	r3, r3, #2
 8000532:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	791b      	ldrb	r3, [r3, #4]
 8000538:	f003 0303 	and.w	r3, r3, #3
 800053c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000546:	d024      	beq.n	8000592 <GPIO_Init+0x162>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a70      	ldr	r2, [pc, #448]	; (8000710 <GPIO_Init+0x2e0>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d01d      	beq.n	800058e <GPIO_Init+0x15e>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a6f      	ldr	r2, [pc, #444]	; (8000714 <GPIO_Init+0x2e4>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d016      	beq.n	800058a <GPIO_Init+0x15a>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a6d      	ldr	r2, [pc, #436]	; (8000718 <GPIO_Init+0x2e8>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d00f      	beq.n	8000586 <GPIO_Init+0x156>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a6c      	ldr	r2, [pc, #432]	; (800071c <GPIO_Init+0x2ec>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d008      	beq.n	8000582 <GPIO_Init+0x152>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a6a      	ldr	r2, [pc, #424]	; (8000720 <GPIO_Init+0x2f0>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d101      	bne.n	800057e <GPIO_Init+0x14e>
 800057a:	2305      	movs	r3, #5
 800057c:	e00a      	b.n	8000594 <GPIO_Init+0x164>
 800057e:	2300      	movs	r3, #0
 8000580:	e008      	b.n	8000594 <GPIO_Init+0x164>
 8000582:	2304      	movs	r3, #4
 8000584:	e006      	b.n	8000594 <GPIO_Init+0x164>
 8000586:	2303      	movs	r3, #3
 8000588:	e004      	b.n	8000594 <GPIO_Init+0x164>
 800058a:	2302      	movs	r3, #2
 800058c:	e002      	b.n	8000594 <GPIO_Init+0x164>
 800058e:	2301      	movs	r3, #1
 8000590:	e000      	b.n	8000594 <GPIO_Init+0x164>
 8000592:	2300      	movs	r3, #0
 8000594:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLCK_EN();
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <GPIO_Init+0x2f4>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a62      	ldr	r2, [pc, #392]	; (8000724 <GPIO_Init+0x2f4>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6193      	str	r3, [r2, #24]
		SYSCFG->SYSCFG_EXTICR[temp1] = (portcode << (temp2 * 4));
 80005a2:	7c7a      	ldrb	r2, [r7, #17]
 80005a4:	7cbb      	ldrb	r3, [r7, #18]
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	fa02 f103 	lsl.w	r1, r2, r3
 80005ac:	4a5e      	ldr	r2, [pc, #376]	; (8000728 <GPIO_Init+0x2f8>)
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
 80005b0:	3302      	adds	r3, #2
 80005b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// Enable EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005b6:	4b55      	ldr	r3, [pc, #340]	; (800070c <GPIO_Init+0x2dc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a51      	ldr	r2, [pc, #324]	; (800070c <GPIO_Init+0x2dc>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6013      	str	r3, [r2, #0]
	}
	//2. Configure speed of port
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOutSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIOx_OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689a      	ldr	r2, [r3, #8]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2303      	movs	r3, #3
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	400a      	ands	r2, r1
 80005f8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->GPIOx_OSPEEDR |= temp;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	430a      	orrs	r2, r1
 8000608:	609a      	str	r2, [r3, #8]
	temp = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

	//3. Configure pull up down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPd << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7a1b      	ldrb	r3, [r3, #8]
 8000612:	461a      	mov	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPd &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	7a1b      	ldrb	r3, [r3, #8]
 8000624:	b25a      	sxtb	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	4619      	mov	r1, r3
 800062c:	2303      	movs	r3, #3
 800062e:	408b      	lsls	r3, r1
 8000630:	b25b      	sxtb	r3, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	b25b      	sxtb	r3, r3
 8000636:	4013      	ands	r3, r2
 8000638:	b25b      	sxtb	r3, r3
 800063a:	b2da      	uxtb	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	721a      	strb	r2, [r3, #8]
	pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPd |= temp;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7a1a      	ldrb	r2, [r3, #8]
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b2da      	uxtb	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	721a      	strb	r2, [r3, #8]
	temp = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]

	//4. Configure output type of GPIO
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOutType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	799b      	ldrb	r3, [r3, #6]
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->GPIOx_OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	4619      	mov	r1, r3
 8000670:	2301      	movs	r3, #1
 8000672:	408b      	lsls	r3, r1
 8000674:	43db      	mvns	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	400a      	ands	r2, r1
 800067e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->GPIOx_OTYPER |= temp;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6859      	ldr	r1, [r3, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	430a      	orrs	r2, r1
 800068e:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

	//5. Configure alternate function only if Pin Mode is alternate
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d131      	bne.n	8000700 <GPIO_Init+0x2d0>
	{
		uint8_t temp1,temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8);//To get array index
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	743b      	strb	r3, [r7, #16]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);//To get shift position
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->GPIOx_AFR[temp1] &= ~(0xF << (4 * temp2));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	7c3a      	ldrb	r2, [r7, #16]
 80006b4:	3208      	adds	r2, #8
 80006b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	220f      	movs	r2, #15
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	4618      	mov	r0, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	7c3a      	ldrb	r2, [r7, #16]
 80006ce:	4001      	ands	r1, r0
 80006d0:	3208      	adds	r2, #8
 80006d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->GPIOx_AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFn << (4 * temp2));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	7c3a      	ldrb	r2, [r7, #16]
 80006dc:	3208      	adds	r2, #8
 80006de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7a5b      	ldrb	r3, [r3, #9]
 80006e6:	461a      	mov	r2, r3
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	7c3a      	ldrb	r2, [r7, #16]
 80006f8:	4301      	orrs	r1, r0
 80006fa:	3208      	adds	r2, #8
 80006fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000700:	bf00      	nop
 8000702:	371c      	adds	r7, #28
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40010400 	.word	0x40010400
 8000710:	48000400 	.word	0x48000400
 8000714:	48000800 	.word	0x48000800
 8000718:	48000c00 	.word	0x48000c00
 800071c:	48001000 	.word	0x48001000
 8000720:	48001400 	.word	0x48001400
 8000724:	40021000 	.word	0x40021000
 8000728:	40010000 	.word	0x40010000

0800072c <GPIO_ToggleOpPin>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_ToggleOpPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	pGPIOx->GPIOx_ODR ^= (1 << PinNumber);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	78fa      	ldrb	r2, [r7, #3]
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	405a      	eors	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	615a      	str	r2, [r3, #20]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <GPIO_IRQConfig>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t E_D)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	71bb      	strb	r3, [r7, #6]
	if (E_D == ENABLE)
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d133      	bne.n	80007d2 <GPIO_IRQConfig+0x7e>
	{
		if (IRQNumber <= 31)
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	2b1f      	cmp	r3, #31
 800076e:	d80a      	bhi.n	8000786 <GPIO_IRQConfig+0x32>
		{
			//Program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000770:	4b34      	ldr	r3, [pc, #208]	; (8000844 <GPIO_IRQConfig+0xf0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	79fa      	ldrb	r2, [r7, #7]
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	4611      	mov	r1, r2
 800077e:	4a31      	ldr	r2, [pc, #196]	; (8000844 <GPIO_IRQConfig+0xf0>)
 8000780:	430b      	orrs	r3, r1
 8000782:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
		}
	}
}
 8000784:	e059      	b.n	800083a <GPIO_IRQConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber <= 64)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b1f      	cmp	r3, #31
 800078a:	d90f      	bls.n	80007ac <GPIO_IRQConfig+0x58>
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b40      	cmp	r3, #64	; 0x40
 8000790:	d80c      	bhi.n	80007ac <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber%32));
 8000792:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <GPIO_IRQConfig+0xf4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	79fa      	ldrb	r2, [r7, #7]
 8000798:	f002 021f 	and.w	r2, r2, #31
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f202 	lsl.w	r2, r1, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a28      	ldr	r2, [pc, #160]	; (8000848 <GPIO_IRQConfig+0xf4>)
 80007a6:	430b      	orrs	r3, r1
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e046      	b.n	800083a <GPIO_IRQConfig+0xe6>
		else if (IRQNumber > 64 && IRQNumber <= 96)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b40      	cmp	r3, #64	; 0x40
 80007b0:	d943      	bls.n	800083a <GPIO_IRQConfig+0xe6>
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b60      	cmp	r3, #96	; 0x60
 80007b6:	d840      	bhi.n	800083a <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber%64));
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <GPIO_IRQConfig+0xf8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <GPIO_IRQConfig+0xf8>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	e033      	b.n	800083a <GPIO_IRQConfig+0xe6>
		if (IRQNumber <= 31)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b1f      	cmp	r3, #31
 80007d6:	d80a      	bhi.n	80007ee <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <GPIO_IRQConfig+0xfc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	2101      	movs	r1, #1
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4611      	mov	r1, r2
 80007e6:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <GPIO_IRQConfig+0xfc>)
 80007e8:	430b      	orrs	r3, r1
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	e025      	b.n	800083a <GPIO_IRQConfig+0xe6>
			else if (IRQNumber > 31 && IRQNumber <= 64)
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b1f      	cmp	r3, #31
 80007f2:	d90f      	bls.n	8000814 <GPIO_IRQConfig+0xc0>
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b40      	cmp	r3, #64	; 0x40
 80007f8:	d80c      	bhi.n	8000814 <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber%32));
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <GPIO_IRQConfig+0x100>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	f002 021f 	and.w	r2, r2, #31
 8000804:	2101      	movs	r1, #1
 8000806:	fa01 f202 	lsl.w	r2, r1, r2
 800080a:	4611      	mov	r1, r2
 800080c:	4a11      	ldr	r2, [pc, #68]	; (8000854 <GPIO_IRQConfig+0x100>)
 800080e:	430b      	orrs	r3, r1
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	e012      	b.n	800083a <GPIO_IRQConfig+0xe6>
			else if (IRQNumber > 64 && IRQNumber <= 96)
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	2b40      	cmp	r3, #64	; 0x40
 8000818:	d90f      	bls.n	800083a <GPIO_IRQConfig+0xe6>
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b60      	cmp	r3, #96	; 0x60
 800081e:	d80c      	bhi.n	800083a <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber%64));
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <GPIO_IRQConfig+0x104>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	79fa      	ldrb	r2, [r7, #7]
 8000826:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800082a:	2101      	movs	r1, #1
 800082c:	fa01 f202 	lsl.w	r2, r1, r2
 8000830:	4611      	mov	r1, r2
 8000832:	4a09      	ldr	r2, [pc, #36]	; (8000858 <GPIO_IRQConfig+0x104>)
 8000834:	430b      	orrs	r3, r1
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	e7ff      	b.n	800083a <GPIO_IRQConfig+0xe6>
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000e104 	.word	0xe000e104
 800084c:	e000e108 	.word	0xe000e108
 8000850:	e000e180 	.word	0xe000e180
 8000854:	e000e184 	.word	0xe000e184
 8000858:	e000e188 	.word	0xe000e188

0800085c <GPIO_IRQPriorityConfig>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	6039      	str	r1, [r7, #0]
 8000866:	71fb      	strb	r3, [r7, #7]
	uint8_t iprx = IRQNumber / 4;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	089b      	lsrs	r3, r3, #2
 800086c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0303 	and.w	r3, r3, #3
 8000874:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3304      	adds	r3, #4
 800087e:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR+(iprx)) |= (IRQPriority << shift_amount);
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000888:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800088c:	6819      	ldr	r1, [r3, #0]
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	409a      	lsls	r2, r3
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800089c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80008a0:	430a      	orrs	r2, r1
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
	...

080008b0 <GPIO_IRQHandling>:
 * @return 			- none
 *
 * @Note			- none
 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	//Clear EXTI PR register
	if(EXTI->EXTI_PR1 & (1 << PinNumber))
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <GPIO_IRQHandling+0x3c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	2101      	movs	r1, #1
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d009      	beq.n	80008e0 <GPIO_IRQHandling+0x30>
	{
		EXTI->EXTI_PR1 |= (1 << PinNumber);
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <GPIO_IRQHandling+0x3c>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <GPIO_IRQHandling+0x3c>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6153      	str	r3, [r2, #20]
	}
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40010400 	.word	0x40010400

080008f0 <memset>:
 80008f0:	4402      	add	r2, r0
 80008f2:	4603      	mov	r3, r0
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d100      	bne.n	80008fa <memset+0xa>
 80008f8:	4770      	bx	lr
 80008fa:	f803 1b01 	strb.w	r1, [r3], #1
 80008fe:	e7f9      	b.n	80008f4 <memset+0x4>

08000900 <__libc_init_array>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	4d0d      	ldr	r5, [pc, #52]	; (8000938 <__libc_init_array+0x38>)
 8000904:	4c0d      	ldr	r4, [pc, #52]	; (800093c <__libc_init_array+0x3c>)
 8000906:	1b64      	subs	r4, r4, r5
 8000908:	10a4      	asrs	r4, r4, #2
 800090a:	2600      	movs	r6, #0
 800090c:	42a6      	cmp	r6, r4
 800090e:	d109      	bne.n	8000924 <__libc_init_array+0x24>
 8000910:	4d0b      	ldr	r5, [pc, #44]	; (8000940 <__libc_init_array+0x40>)
 8000912:	4c0c      	ldr	r4, [pc, #48]	; (8000944 <__libc_init_array+0x44>)
 8000914:	f000 f818 	bl	8000948 <_init>
 8000918:	1b64      	subs	r4, r4, r5
 800091a:	10a4      	asrs	r4, r4, #2
 800091c:	2600      	movs	r6, #0
 800091e:	42a6      	cmp	r6, r4
 8000920:	d105      	bne.n	800092e <__libc_init_array+0x2e>
 8000922:	bd70      	pop	{r4, r5, r6, pc}
 8000924:	f855 3b04 	ldr.w	r3, [r5], #4
 8000928:	4798      	blx	r3
 800092a:	3601      	adds	r6, #1
 800092c:	e7ee      	b.n	800090c <__libc_init_array+0xc>
 800092e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000932:	4798      	blx	r3
 8000934:	3601      	adds	r6, #1
 8000936:	e7f2      	b.n	800091e <__libc_init_array+0x1e>
 8000938:	08000960 	.word	0x08000960
 800093c:	08000960 	.word	0x08000960
 8000940:	08000960 	.word	0x08000960
 8000944:	08000964 	.word	0x08000964

08000948 <_init>:
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	bf00      	nop
 800094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800094e:	bc08      	pop	{r3}
 8000950:	469e      	mov	lr, r3
 8000952:	4770      	bx	lr

08000954 <_fini>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	bf00      	nop
 8000958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095a:	bc08      	pop	{r3}
 800095c:	469e      	mov	lr, r3
 800095e:	4770      	bx	lr
